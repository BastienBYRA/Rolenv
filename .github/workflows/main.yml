name: Test, Build and Release

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.5'

    - name: Install dependencies
      run: go get .

    - name: Run tests
      run: go test -v ./...

    - name: Integration tests
      run: |
        go build -o rolenv
        ./rolenv run --config testdata/rolenv.env
        sleep 5
        if docker ps | grep rolenv-test-cont; then
          echo "The container Rolenv is running"
        else
          echo "Error, the container is not running" && exit 1
        fi

  test-build-and-download:
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          # - os: windows-latest
          #   goos: windows
          #   goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.5'

    - name: Extract version from version file
      id: get_version
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows (PowerShell)
          VERSION=$(powershell -command "Get-Content version")
          powershell -command "Add-Content -Path \$env:GITHUB_ENV -Value 'VERSION=$VERSION'"
        else
          # Linux/macOS (Bash)
          VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Build
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows (PowerShell)
          powershell -command "`$env:GOOS = 'windows'; `$env:GOARCH = 'amd64'; go build -o rolenv-${{ matrix.goos }}-${{ matrix.goarch }}"
        else
          # Linux/macOS (Bash)
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o rolenv-${{ matrix.goos }}-${{ matrix.goarch }}
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rolenv-${{ matrix.goos }}-${{ matrix.goarch }}
        path: rolenv-${{ matrix.goos }}-${{ matrix.goarch }}

    # Install binaries
    # - name: Download artifacts (Binary Windows)
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: rolenv-windows-amd64
    #     path: artifacts
    - name: Download artifacts (Binary Linux)
      uses: actions/download-artifact@v4
      with:
        name: rolenv-linux-amd64
        path: artifacts
    - name: Download artifacts (Binary MacOS)
      uses: actions/download-artifact@v4
      with:
        name: rolenv-darwin-amd64
        path: artifacts

    - name: Flatten artifact structure
      run: |
        mkdir -p binaries
        cp -r artifacts/*/rolenv-* binaries/
      shell: bash










  build-image:
    needs: test
    if: github.ref == 'refs/heads/release' || github.base_ref == 'refs/heads/release'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from version file
        id: get_version
        run: |
          VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Log in to the Container registry (GitHub Container Registry)
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6.15.0
        with:
          context: .
          file: "./Dockerfile.host-socket"
          push: true
          tags: |
            ghcr.io/bastienbyra/rolenv-host-socket:${{ env.VERSION }}
            ghcr.io/bastienbyra/rolenv-host-socket:latest

  build-binairies:
    needs: test
    if: github.ref == 'refs/heads/release' || github.base_ref == 'refs/heads/release'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: windows-latest
            goos: windows
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.5'

    - name: Extract version from version file
      id: get_version
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows (PowerShell)
          VERSION=$(powershell -command "Get-Content version")
          powershell -command "Add-Content -Path \$env:GITHUB_ENV -Value 'VERSION=$VERSION'"
        else
          # Linux/macOS (Bash)
          VERSION=$(cat version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Build
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows (PowerShell)
          powershell -command "`$env:GOOS = 'windows'; `$env:GOARCH = 'amd64'; go build -o rolenv-${{ matrix.goos }}-${{ matrix.goarch }}"
        else
          # Linux/macOS (Bash)
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o rolenv-${{ matrix.goos }}-${{ matrix.goarch }}
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: rolenv-${{ matrix.goos }}-${{ matrix.goarch }}
        path: rolenv-${{ matrix.goos }}-${{ matrix.goarch }}

  create_release:
    needs: build-binairies
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release' || github.base_ref == 'refs/heads/release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Install binaries
    - name: Download artifacts (Binary Windows)
      uses: actions/download-artifact@v4
      with:
        name: rolenv-windows-amd64
        path: artifacts
    - name: Download artifacts (Binary Linux)
      uses: actions/download-artifact@v4
      with:
        name: rolenv-linux-amd64
        path: artifacts
    - name: Download artifacts (Binary MacOS)
      uses: actions/download-artifact@v4
      with:
        name: rolenv-darwin-amd64
        path: artifacts

    - name: Flatten artifact structure
      run: |
        mkdir -p binaries
        cp -r artifacts/*/rolenv-* binaries/
      shell: bash

    - name: Extract version from version file
      id: get_version
      run: |
        VERSION=$(cat version)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        body: "Automated release generated by GitHub Actions."
        draft: false
        prerelease: false
        files: |
          binaries/rolenv-linux-amd64
          binaries/rolenv-windows-amd64
          binaries/rolenv-darwin-amd64
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}